<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Protocol.Core.v3</name>
    </assembly>
    <members>
        <member name="T:NuGet.Protocol.Core.v3.CachingSourceProvider">
            <summary>
            A caching source repository provider intended to be used as a singleton.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.CachingSourceProvider.GetRepositories">
            <summary>
            Retrieve repositories that have been cached.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.CachingSourceProvider.CreateRepository(System.String)">
            <summary>
            Create a repository and add it to the cache.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.CachingSourceProvider.CreateRepository(NuGet.Configuration.PackageSource)">
            <summary>
            Create a repository and add it to the cache.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.Strings">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.ActionExecutor_RollingBack">
            <summary>
               Looks up a localized string similar to Install failed. Rolling back....
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.ActionResolver_UnsupportedAction">
            <summary>
               Looks up a localized string similar to Unrecognized Package Action &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.ActionResolver_UnsupportedDependencyBehavior">
            <summary>
               Looks up a localized string similar to Unsupported Dependency Behavior &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.AddPackage_ExistingPackageInvalid">
            <summary>
               Looks up a localized string similar to Package &apos;{0}&apos; already exists at feed &apos;{1}&apos; and is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.AddPackage_PackageAlreadyExists">
            <summary>
               Looks up a localized string similar to Package &apos;{0}&apos; already exists at feed &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.AddPackage_SuccessfullyAdded">
            <summary>
               Looks up a localized string similar to Successfully added package &apos;{0}&apos; to feed &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Argument_Cannot_Be_Null_Or_Empty">
            <summary>
               Looks up a localized string similar to Argument can not be null or empty..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.ArgumentCannotBeNullOrEmpty">
            <summary>
               Looks up a localized string similar to Argument cannot be null or empty..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.DefaultSymbolServer">
            <summary>
               Looks up a localized string similar to the symbol server.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.DeleteCommandCanceled">
            <summary>
               Looks up a localized string similar to Delete canceled.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.DeleteCommandConfirm">
            <summary>
               Looks up a localized string similar to {0} {1} will be deleted from the {2}. Would you like to continue?.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.DeleteCommandDeletedPackage">
            <summary>
               Looks up a localized string similar to {0} {1} was deleted successfully..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.DeleteCommandDeletingPackage">
            <summary>
               Looks up a localized string similar to Deleting {0} {1} from the {2}..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.DeletePackage_NotFound">
            <summary>
               Looks up a localized string similar to Not Found..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.DownloadActionHandler_InvalidDownloadUrl">
            <summary>
               Looks up a localized string similar to The download URL for {0} &apos;{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.DownloadActionHandler_NoDownloadUrl">
            <summary>
               Looks up a localized string similar to No download URL could be found for {0}..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Error_DownloadTimeout">
            <summary>
               Looks up a localized string similar to The download of &apos;{0}&apos; timed out because no data was received for {1}ms..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Http_CredentialsForForbidden">
            <summary>
               Looks up a localized string similar to The server responded with HTTP &apos;403 Forbidden&apos; when accessing the source &apos;{0}&apos;. This suggests that the server has authenticated your identity but has not permitted you to access the requested resource. Provide credentials that have permissions to view this resource..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Http_CredentialsForProxy">
            <summary>
               Looks up a localized string similar to The server responded with HTTP &apos;407 Proxy Authentication Required&apos; when accessing the proxy &apos;{0}&apos;. This suggests that the server needs credentials to authenticate your identity to use a proxy. Provide credentials to access this resource..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Http_CredentialsForUnauthorized">
            <summary>
               Looks up a localized string similar to The server responded with HTTP &apos;401 Unauthorized&apos; when accessing the source &apos;{0}&apos;. This suggests that the server needs credentials to authenticate your identity. Provide credentials to access this resource..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Http_RequestLog">
            <summary>
               Looks up a localized string similar to {0} {1}.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Http_ResponseLog">
            <summary>
               Looks up a localized string similar to {0} {1} {2}ms.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Http_Timeout">
            <summary>
               Looks up a localized string similar to The HTTP request to &apos;{0} {1}&apos; has timed out after {2}ms..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.InvalidVersionFolder">
            <summary>
               Looks up a localized string similar to The folder &apos;{0}&apos; contains an invalid version..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.LiveFeed">
            <summary>
               Looks up a localized string similar to the NuGet gallery.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_CanceledNupkgDownload">
            <summary>
               Looks up a localized string similar to Downloading a package from &apos;{0}&apos; was canceled..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_ErrorDownloading">
            <summary>
               Looks up a localized string similar to Error downloading &apos;{0}&apos; from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_FailedToDownloadPackage">
            <summary>
               Looks up a localized string similar to Failed to download package from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_FailedToFetchV2Feed">
            <summary>
               Looks up a localized string similar to The V2 feed at &apos;{0}&apos; returned an unexpected status code &apos;{1} {2}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_FailedToGetNupkgStream">
            <summary>
               Looks up a localized string similar to Unable to load package &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_FailedToGetNuspecStream">
            <summary>
               Looks up a localized string similar to Unable to load nuspec from package &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_FailedToReadServiceIndex">
            <summary>
               Looks up a localized string similar to Unable to load the service index for source {0}..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_FailedToRetrievePackage">
            <summary>
               Looks up a localized string similar to Failed to retrieve information from remote source &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_FileIsCorrupt">
            <summary>
               Looks up a localized string similar to The file &apos;{0}&apos; is corrupt..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_InvalidCacheEntry">
            <summary>
               Looks up a localized string similar to An invalid cache entry was found for URL &apos;{0}&apos; and will be replaced..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_InvalidNupkgFromUrl">
            <summary>
               Looks up a localized string similar to The nupkg at &apos;{0}&apos; is not valid..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_RetryingFindPackagesById">
            <summary>
               Looks up a localized string similar to Retrying &apos;{0}&apos; for source &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_RetryingHttp">
            <summary>
               Looks up a localized string similar to An error was encountered when fetching &apos;{0} {1}&apos;. The request will now be retried..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Log_RetryingServiceIndex">
            <summary>
               Looks up a localized string similar to Retrying service index request for source &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.NoApiKeyFound">
            <summary>
               Looks up a localized string similar to No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the &apos;setApiKey&apos; command..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.NuGetRepository_CannotCreateAggregateRepo">
            <summary>
               Looks up a localized string similar to Cannot create a NuGet Repository from the Aggregate Source.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.NuGetServiceProvider_ServiceNotSupported">
            <summary>
               Looks up a localized string similar to The {0} service is not supported by this object..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.NupkgPath_Invalid">
            <summary>
               Looks up a localized string similar to &apos;{0}&apos; is not a valid nupkg file..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.OneOrMoreUrisMustBeSpecified">
            <summary>
               Looks up a localized string similar to One or more URIs must be specified..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.PackageActionDescriptionWrapper_UnrecognizedAction">
            <summary>
               Looks up a localized string similar to Unrecognized Package Action &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.PackageServerEndpoint_NotSupported">
            <summary>
               Looks up a localized string similar to ERROR: This version of nuget.exe does not support updating packages to package source &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Path_Invalid">
            <summary>
               Looks up a localized string similar to &apos;{0}&apos; is not a valid path..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Path_Invalid_NotFileNotUnc">
            <summary>
               Looks up a localized string similar to &apos;{0}&apos; should be a local path or a UNC share path..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.ProjectInstallationTarget_ProjectIsNotTargetted">
            <summary>
               Looks up a localized string similar to The project &apos;{0}&apos; is not one of the projects targetted by this object..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_BadSource">
            <summary>
               Looks up a localized string similar to Failed to retrieve metadata from source &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_FlatContainerIndexVersionsNotArray">
            <summary>
               Looks up a localized string similar to The &apos;versions&apos; property at &apos;{0}&apos; must be an array..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_IndexMissingResourcesNode">
            <summary>
               Looks up a localized string similar to Service index document is missing the &apos;resources&apos; property..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_InvalidJsonObject">
            <summary>
               Looks up a localized string similar to The content at &apos;{0}&apos; is not a valid JSON object..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_InvalidServiceIndex">
            <summary>
               Looks up a localized string similar to The source does not have the &apos;version&apos; property at &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_InvalidXml">
            <summary>
               Looks up a localized string similar to The content at &apos;{0}&apos; is not valid XML..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_MalformedMetadataError">
            <summary>
               Looks up a localized string similar to Metadata could not be loaded from the source &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_MissingRegistrationBase">
            <summary>
               Looks up a localized string similar to The source does not have a Registration Base Url defined!.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_MissingSearchService">
            <summary>
               Looks up a localized string similar to The source does not have a Search service!.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_MissingVersion">
            <summary>
               Looks up a localized string similar to The source does not have the &apos;version&apos; property..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_PackageMetadataError">
            <summary>
               Looks up a localized string similar to An error occurred while retrieving package metadata for &apos;{0}&apos; from source &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Protocol_UnsupportedVersion">
            <summary>
               Looks up a localized string similar to The source version is not supported: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.PushCommandPackagePushed">
            <summary>
               Looks up a localized string similar to Your package was pushed..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.PushCommandPushingPackage">
            <summary>
               Looks up a localized string similar to Pushing {0} to {1}....
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.RequiredFeatureUnsupportedException_DefaultMessageWithFeature">
            <summary>
               Looks up a localized string similar to The &apos;{0}&apos; installation feature was required by a package but is not supported on the current host..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.RequiredFeatureUnsupportedException_DefaultMessageWithoutFeature">
            <summary>
               Looks up a localized string similar to The installation host does not support a feature required by this package..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.UnableToFindFile">
            <summary>
               Looks up a localized string similar to File does not exist ({0})..
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.Strings.Warning_SymbolServerNotConfigured">
            <summary>
               Looks up a localized string similar to Found symbols package &apos;{0}&apos;, but no API key was specified for the symbol server. To save an API Key, run &apos;NuGet.exe setApiKey [your API key from http://www.NuGet.org]&apos;..
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.JsonExtensions.ToJson(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serialize object to the JSON.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.JsonExtensions.FromJson``1(System.String)">
            <summary>
            Deserialize object from the JSON.
            </summary>
            <typeparam name="T">Type of object</typeparam>
            <param name="json">JSON representation of object</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.JsonExtensions.FromJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserialize object from the JSON.
            </summary>
            <typeparam name="T">Type of object</typeparam>
            <param name="json">JSON representation of object</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.JsonExtensions.FromJson(System.String,System.Type)">
            <summary>
            Deserialize object from the JSON.
            </summary>
            <param name="json">JSON representation of object</param>
            <param name="type">The object type.</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.JsonExtensions.ToJToken(System.Object)">
            <summary>
            Serialize object to JToken.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.JsonExtensions.FromJToken``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Deserialize object directly from JToken.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="jtoken">The JToken to be deserialized.</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.JsonExtensions.FromJToken(Newtonsoft.Json.Linq.JToken,System.Type)">
            <summary>
            Deserialize object directly from JToken.
            </summary>
            <param name="jtoken">The JToken to be deserialized.</param>
            <param name="type">The object type.</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.JsonExtensions.GetJObjectProperty``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Extract the property directly from JObject.
            </summary>
            <typeparam name="T">Type of property to return.</typeparam>
            <param name="jobject">The JObject to be deserialized.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfo.ResolverMetadataClient.GetDependencies(NuGet.Protocol.HttpSource,System.Uri,NuGet.Versioning.VersionRange,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Retrieve the <see cref="T:NuGet.Protocol.Core.Types.RemoteSourceDependencyInfo" /> for a registration.
            </summary>
            <returns>Returns an empty sequence if the package does not exist.</returns>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfo.ResolverMetadataClient.ProcessPackageVersion(Newtonsoft.Json.Linq.JObject,NuGet.Versioning.NuGetVersion)">
            <summary>
            Process an individual package version entry
            </summary>
            <param name="packageObj"></param>
            <param name="version"></param>
            <returns>Returns the RemoteSourceDependencyInfo object corresponding to this package version</returns>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfo.ResolverMetadataClient.GetRegistrationInfo(NuGet.Protocol.HttpSource,System.Uri,NuGet.Versioning.VersionRange,NuGet.Frameworks.NuGetFramework,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Retrieve a registration blob
            </summary>
            <returns>Returns Null if the package does not exist</returns>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfo.ResolverMetadataClient.GetFramework(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Retrieve the target framework from a dependency group obj
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.AmbientAuthenticationState">
            <summary>
            Represents source authentication status per active operation
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.HttpHandlerResourceV3">
            <summary>
            Resource wrapper for an HttpClient
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.HttpHandlerResourceV3.CredentialSerivce">
            <summary>
            Function to be called to prompt user for proxy credentials.
            </summary> 
        </member>
        <member name="P:NuGet.Protocol.Core.v3.HttpHandlerResourceV3.PromptForCredentialsAsync">
            <summary>
            Gets or sets a delegate to be invoked to prompt user for authenticated feed credentials.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.HttpHandlerResourceV3.CredentialsSuccessfullyUsed">
            <summary>
            Gets or sets a delegate that is to be invoked when authenticated feed credentials are successfully
            used.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.ProxyCredentialHandler">
            <summary>
            A message handler responsible for retrying request for authenticated proxies
            with missing credentials.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.ODataServiceDocumentResourceV2Provider.MaxCacheDuration">
            <summary>
            Maximum amount of time to store index.json
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.LocalRepositories.LocalV2FindPackageByIdResourceProvider">
            <summary>
            A v2-style package repository that has nupkgs at the root.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.LocalRepositories.LocalV3FindPackageByIdResourceProvider">
            <summary>
            A v3-style package repository that has expanded packages.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.DependencyInfoResourceV3Provider">
            <summary>
            Retrieves all dependency info for the package resolver.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.ServiceIndexResourceV3Provider">
            <summary>
            Retrieves and caches service index.json files
            ServiceIndexResourceV3 stores the json, all work is done in the provider
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.ServiceIndexResourceV3Provider.MaxCacheDuration">
            <summary>
            Maximum amount of time to store index.json
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.RemoteRepositories.HttpFileSystemBasedFindPackageByIdResource">
            <summary>
            A <see cref="T:NuGet.Protocol.Core.Types.FindPackageByIdResource" /> for a Http-based file system where files are laid out in the
            format
            /root/
            PackageA/
            Version0/
            PackageA.nuspec
            PackageA.Version0.nupkg
            and are accessible via HTTP Gets.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.RemoteRepositories.PackageUtilities.OpenNuspecFromNupkgAsync(System.String,System.Threading.Tasks.Task{System.IO.Stream},NuGet.Common.ILogger)">
            <summary>
            Create a <see cref="T:NuGet.Packaging.NuspecReader"/> from a nupkg stream.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.RemoteRepositories.RemoteV2FindPackageByIdResourceProvider">
            <summary>
            A <see cref="T:NuGet.Protocol.Core.Types.ResourceProvider" /> for <see cref="T:NuGet.Protocol.Core.Types.FindPackageByIdResource" /> over v2 NuGet feeds.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.DependencyInfoResourceV3">
            <summary>
            Retrieves all packages and dependencies from a V3 source.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfoResourceV3.#ctor(NuGet.Protocol.HttpSource,NuGet.Protocol.Core.v3.RegistrationResourceV3,NuGet.Protocol.Core.Types.SourceRepository)">
            <summary>
            Dependency info resource
            </summary>
            <param name="client">Http client</param>
            <param name="regResource">Registration blob resource</param>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfoResourceV3.ResolvePackage(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Retrieve dependency info for a single package.
            </summary>
            <param name="package">package id and version</param>
            <param name="projectFramework">project target framework. This is used for finding the dependency group</param>
            <param name="token">cancellation token</param>
            <returns>
            Returns dependency info for the given package if it exists. If the package is not found null is
            returned.
            </returns>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfoResourceV3.ResolvePackages(System.String,NuGet.Frameworks.NuGetFramework,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Retrieve the available packages and their dependencies.
            </summary>
            <remarks>Includes prerelease packages</remarks>
            <param name="packageId">package Id to search</param>
            <param name="projectFramework">project target framework. This is used for finding the dependency group</param>
            <param name="token">cancellation token</param>
            <returns>available packages and their dependencies</returns>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfoResourceV3.ResolvePackages(System.String,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Retrieve the available packages and their dependencies.
            </summary>
            <remarks>Includes prerelease packages</remarks>
            <param name="packageId">package Id to search</param>
            <param name="token">cancellation token</param>
            <returns>available packages and their dependencies</returns>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DependencyInfoResourceV3.GetPackagesFromRegistration(NuGet.Protocol.Core.v3.DependencyInfo.RegistrationInfo,System.Threading.CancellationToken)">
            <summary>
            Retrieve dependency info from a registration blob
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.DownloadResourceV3">
            <summary>
            Provides the download metatdata for a given package from a V3 server endpoint.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DownloadResourceV3.#ctor(NuGet.Protocol.HttpSource,NuGet.Protocol.Core.v3.RegistrationResourceV3)">
            <summary>
            Download packages using the download url found in the registration resource.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DownloadResourceV3.#ctor(NuGet.Protocol.HttpSource,System.String)">
            <summary>
            Download packages using the package base address container resource.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.DownloadResourceV3.GetDownloadUrl(NuGet.Packaging.Core.PackageIdentity,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Get the download url of the package.
            1. If the identity is a SourcePackageDependencyInfo the SourcePackageDependencyInfo.DownloadUri is used.
            2. A url will be constructed for the flat container location if the source has that resource.
            3. The download url will be found in the registration blob as a fallback.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.MetadataResourceV3">
            <summary>
            Returns the full package metadata
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.MetadataResourceV3.GetLatestVersions(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Find the latest version of the package
            </summary>
            <param name="includePrerelease">include versions with prerelease labels</param>
            <param name="includeUnlisted">not implemented yet</param>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.RegistrationResourceV3">
            <summary>
            Registration blob reader
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.RegistrationResourceV3.BaseUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> for the source backing this resource.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.RegistrationResourceV3.GetUri(System.String)">
            <summary>
            Constructs the URI of a registration index blob
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.RegistrationResourceV3.GetUri(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Constructs the URI of a registration blob with a specific version
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.RegistrationResourceV3.GetUri(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Constructs the URI of a registration blob with a specific version
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.RegistrationResourceV3.GetPackageMetadata(NuGet.Packaging.Core.PackageIdentity,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Returns the registration blob for the id and version
            </summary>
            <remarks>The inlined entries are potentially going away soon</remarks>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.RegistrationResourceV3.GetPackageMetadata(System.String,System.Boolean,System.Boolean,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Returns inlined catalog entry items for each registration blob
            </summary>
            <remarks>The inlined entries are potentially going away soon</remarks>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.RegistrationResourceV3.GetPackageMetadata(System.String,NuGet.Versioning.VersionRange,System.Boolean,System.Boolean,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Returns inlined catalog entry items for each registration blob
            </summary>
            <remarks>The inlined entries are potentially going away soon</remarks>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.RegistrationResourceV3.GetPackageEntries(System.String,System.Boolean,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Returns all index entries of type Package within the given range and filters
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.v3.ReportAbuseResourceV3.GetReportAbuseUrl(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets a URL for reporting package abuse. The URL will not be verified to exist.
            </summary>
            <param name="id">The package id (natural casing)</param>
            <param name="version">The package version</param>
            <returns>The first URL from the resource, with the URI template applied.</returns>
        </member>
        <member name="T:NuGet.Protocol.Core.v3.ServiceIndexResourceV3">
            <summary>
            Stores/caches a service index json file.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.ServiceIndexResourceV3.RequestTime">
            <summary>
            Time the index was requested
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.ServiceIndexResourceV3.Empty">
            <summary>
            Empty set of endpoints - needed to efficiently meet indexer contract
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.ServiceIndexResourceV3.Item(System.String)">
            <summary>
            A list of endpoints for a service type
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.v3.ServiceIndexResourceV3.Item(System.String[])">
            <summary>
            A list of endpoints for a service type - in priority order
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.Types.FindPackageByIdDependencyInfo.#ctor(System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageDependencyGroup},System.Collections.Generic.IEnumerable{NuGet.Packaging.FrameworkSpecificGroup})">
            <summary>
            DependencyInfo
            </summary>
            <param name="dependencyGroups">package dependency groups</param>
            <param name="frameworkReferenceGroups">Sequence of <see cref="T:NuGet.Packaging.FrameworkSpecificGroup" />s.</param>
        </member>
        <member name="P:NuGet.Protocol.Core.Types.FindPackageByIdDependencyInfo.DependencyGroups">
            <summary>
            Gets the package dependecy groups.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.Core.Types.FindPackageByIdDependencyInfo.FrameworkReferenceGroups">
            <summary>
            Gets the framework reference groups.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.Types.FindPackageByIdResource.GetDependencyInfoAsync(System.String,NuGet.Versioning.NuGetVersion,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:NuGet.Protocol.Core.Types.FindPackageByIdDependencyInfo" /> for a specific package.
            </summary>
            <param name="id">The packag id.</param>
            <param name="version">The package version.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that on completion returns a <see cref="T:NuGet.Protocol.Core.Types.FindPackageByIdDependencyInfo" /> of the
            package, if found,
            <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:NuGet.Protocol.Core.Types.FindPackageByIdResource.GetDependencyInfo(NuGet.Packaging.NuspecReader)">
            <summary>
            Read dependency info from a nuspec.
            </summary>
            <remarks>This also verifies minClientVersion.</remarks>
        </member>
        <member name="T:NuGet.Protocol.Core.Types.PackageUpdateResource">
            <summary>
            Contains logics to push or delete packages in Http server or file system
            </summary>
        </member>
        <member name="M:NuGet.Protocol.Core.Types.PackageUpdateResource.GetSymbolsPath(System.String)">
            <summary>
            Get the symbols package from the original package. Removes the .nupkg and adds .symbols.nupkg
            </summary>
        </member>
        <member name="T:NuGet.Protocol.CredentialHelper">
            <summary>
            A mutable CredentialCache wrapper. This allows the underlying ICredentials to
            be changed to work around HttpClientHandler not allowing Credentials to change.
            This class intentionally inherits from CredentialCache to support authentication on redirects.
            According to System.Net implementation any other ICredentials implementation is dropped for security reasons.
            </summary>
        </member>
        <member name="F:NuGet.Protocol.CredentialHelper._credentials">
            <summary>
            Credentials can be changed by other threads, for this reason volatile
            is added below so that the value is not cached anywhere.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.CredentialHelper.Credentials">
            <summary>
            Latest credentials to be used.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.CredentialHelper.System#Net#ICredentials#GetCredential(System.Uri,System.String)">
            <summary>
            Used by the HttpClientHandler to retrieve the current credentials.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.HttpRequestMessageExtensions.Clone(System.Net.Http.HttpRequestMessage)">
            <summary>
            Clones an <see cref="T:System.Net.Http.HttpRequestMessage" /> request.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.HttpRequestMessageExtensions.GetOrCreateConfiguration(System.Net.Http.HttpRequestMessage)">
            <summary>
            Retrieves the HTTP request configuration instance attached to the given message as custom property.
            </summary>
            <param name="request">The HTTP request message.</param>
            <returns>Configuration instance if exists, or a default instance otherwise.</returns>
        </member>
        <member name="M:NuGet.Protocol.HttpRequestMessageExtensions.SetConfiguration(System.Net.Http.HttpRequestMessage,NuGet.Protocol.HttpRequestMessageConfiguration)">
            <summary>
            Attaches an HTTP request configuration instance to the given message as custom property.
            If the configuration has already been set on the request message, the old configuration
            is replaced.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="configuration">An HTTP request message configuration instance.</param>
        </member>
        <member name="T:NuGet.Protocol.HttpRequestMessageFactory">
            <summary>
            Factory class containing methods facilitating creation of <see cref="T:System.Net.Http.HttpRequestMessage"/> 
            with additional custom parameters.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.HttpRequestMessageFactory.Create(System.Net.Http.HttpMethod,System.String,NuGet.Protocol.HttpRequestMessageConfiguration)">
            <summary>
            Creates an instance of <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="method">Desired HTTP verb</param>
            <param name="requestUri">Request URI</param>
            <param name="configuration">The request configuration</param>
            <returns>Instance of <see cref="T:System.Net.Http.HttpRequestMessage"/></returns>
        </member>
        <member name="M:NuGet.Protocol.HttpRequestMessageFactory.Create(System.Net.Http.HttpMethod,System.Uri,NuGet.Protocol.HttpRequestMessageConfiguration)">
            <summary>
            Creates an instance of <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="method">Desired HTTP verb</param>
            <param name="requestUri">Request URI</param>
            <param name="configuration">The request configuration</param>
            <returns>Instance of <see cref="T:System.Net.Http.HttpRequestMessage"/></returns>
        </member>
        <member name="T:NuGet.Protocol.HttpRetryHandler">
            <summary>
            The <see cref="T:NuGet.Protocol.HttpRetryHandler"/> is for retrying and HTTP request if it times out, has any exception,
            or returns a status code of 500 or greater.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.HttpRetryHandler.SendAsync(NuGet.Protocol.HttpRetryHandlerRequest,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Make an HTTP request while retrying after failed attempts or timeouts.
            </summary>
            <remarks>
            This method accepts a factory to create instances of the <see cref="T:System.Net.Http.HttpRequestMessage"/> because
            requests cannot always be used. For example, suppose the request is a POST and contains content
            of a stream that can only be consumed once.
            </remarks>
        </member>
        <member name="T:NuGet.Protocol.HttpRetryHandlerRequest">
            <summary>
            A request to be handled by <see cref="T:NuGet.Protocol.HttpRetryHandler"/>. This type should contain all
            of the knowledge necessary to make a request, while handling transient transport errors.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.HttpRetryHandlerRequest.HttpClient">
            <summary>The HTTP client to use for each request attempt.</summary>
        </member>
        <member name="P:NuGet.Protocol.HttpRetryHandlerRequest.RequestFactory">
            <summary>
            The factory that generates each request message. This factory is invoked for each attempt.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.HttpRetryHandlerRequest.CompletionOption">
            <summary>The HTTP completion option to use for the next attempt.</summary>
        </member>
        <member name="P:NuGet.Protocol.HttpRetryHandlerRequest.MaxTries">
            <summary>The maximum number of times to try the request. This value includes the initial attempt.</summary>
            <remarks>This API is intended only for testing purposes and should not be used in product code.</remarks>
        </member>
        <member name="P:NuGet.Protocol.HttpRetryHandlerRequest.RequestTimeout">
            <summary>How long to wait on the request to come back with a response.</summary>
        </member>
        <member name="P:NuGet.Protocol.HttpRetryHandlerRequest.RetryDelay">
            <summary>How long to wait before trying again after a failed request.</summary>
            <summary>This API is intended only for testing purposes and should not be used in product code.</summary>
        </member>
        <member name="P:NuGet.Protocol.HttpSource.DownloadTimeout">
            <summary>The timeout to apply to <see cref="T:NuGet.Protocol.DownloadTimeoutStream"/> instances.</summary>
            <summary>This API is intended only for testing purposes and should not be used in product code.</summary>
        </member>
        <member name="P:NuGet.Protocol.HttpSource.RetryHandler">
            <summary>The retry handler to use for all HTTP requests.</summary>
            <summary>This API is intended only for testing purposes and should not be used in product code.</summary>
        </member>
        <member name="M:NuGet.Protocol.HttpSource.GetAsync(System.String,System.String,NuGet.Protocol.Core.Types.HttpSourceCacheContext,NuGet.Common.ILogger,System.Boolean,System.Action{System.IO.Stream},System.Threading.CancellationToken)">
            <summary>
            Caching Get request.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.HttpSource.GetAsync(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue[],System.String,NuGet.Protocol.Core.Types.HttpSourceCacheContext,NuGet.Common.ILogger,System.Boolean,System.Action{System.IO.Stream},System.Threading.CancellationToken)">
            <summary>
            Caching Get request.
            </summary>
        </member>
        <member name="T:NuGet.Protocol.HttpSourceResource">
            <summary>
            Holds a shared <see cref="P:NuGet.Protocol.HttpSourceResource.HttpSource"/>. 
            This is expected to be shared across the app and should not be disposed of.
            </summary>
        </member>
        <member name="F:NuGet.Protocol.STSAuthHelper.STSEndPointHeader">
            <summary>
            Response header that specifies the WSTrust13 Windows Transport endpoint.
            </summary>
        </member>
        <member name="F:NuGet.Protocol.STSAuthHelper.STSRealmHeader">
            <summary>
            Response header that specifies the realm to authenticate for. In most cases this would be the gallery we are going up against.
            </summary>
        </member>
        <member name="F:NuGet.Protocol.STSAuthHelper.STSTokenHeader">
            <summary>
            Request header that contains the SAML token.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.STSAuthHelper.PrepareSTSRequest(System.Uri,NuGet.Configuration.CredentialStore,System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds the SAML token as a header to the request if it is already cached for this host.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.STSAuthHelper.TryRetrieveSTSToken(System.Uri,NuGet.Configuration.CredentialStore,System.Net.Http.HttpResponseMessage)">
            <summary>
            Attempts to retrieve a SAML token if the response indicates that server requires STS-based auth. 
            </summary>
        </member>
        <member name="M:NuGet.Protocol.DependencyInfoResourceV2Feed.CreateDependencyInfo(NuGet.Protocol.V2FeedPackageInfo,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Convert a V2 feed package into a V3 PackageDependencyInfo
            </summary>
        </member>
        <member name="T:NuGet.Protocol.V2FeedPackageInfo">
            <summary>
            Represents a V2 package entry from the OData feed. This object primarily just holds the strings parsed from XML, all parsing 
            and converting should be done after based on the scenario.
            </summary>
        </member>
        <member name="P:NuGet.Protocol.V2FeedPackageInfo.DownloadCountAsInt">
            <summary>
            Parse DownloadCount into an integer
            </summary>
        </member>
        <member name="P:NuGet.Protocol.V2FeedPackageInfo.IsListed">
            <summary>
            Checks the published date
            </summary>
        </member>
        <member name="P:NuGet.Protocol.V2FeedPackageInfo.DependencySets">
            <summary>
            Parses Dependencies into actual groups
            </summary>
        </member>
        <member name="T:NuGet.Protocol.V2FeedParser">
            <summary>
            A light weight XML parser for NuGet V2 Feeds
            </summary>
        </member>
        <member name="M:NuGet.Protocol.V2FeedParser.#ctor(NuGet.Protocol.HttpSource,System.String)">
            <summary>
            Creates a V2 parser
            </summary>
            <param name="httpSource">HttpSource and message handler containing auth/proxy support</param>
            <param name="baseAddress">base address for all services from this OData service</param>
        </member>
        <member name="M:NuGet.Protocol.V2FeedParser.#ctor(NuGet.Protocol.HttpSource,System.String,NuGet.Configuration.PackageSource)">
            <summary>
            Creates a V2 parser
            </summary>
            <param name="httpSource">HttpSource and message handler containing auth/proxy support</param>
            <param name="baseAddress">base address for all services from this OData service</param>
            <param name="source">PackageSource useful for reporting meaningful errors that relate back to the configuration</param>
        </member>
        <member name="M:NuGet.Protocol.V2FeedParser.GetPackage(NuGet.Packaging.Core.PackageIdentity,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Get an exact package
            </summary>
        </member>
        <member name="M:NuGet.Protocol.V2FeedParser.FindPackagesByIdAsync(System.String,System.Boolean,System.Boolean,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Retrieves all packages with the given Id from a V2 feed.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.V2FeedParser.FindPackagesByIdAsync(System.String,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Retrieves all packages with the given Id from a V2 feed.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.V2FeedParser.ParsePage(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Finds all entries on the page and parses them
            </summary>
        </member>
        <member name="M:NuGet.Protocol.V2FeedParser.ParsePackage(System.String,System.Xml.Linq.XElement)">
            <summary>
            Parse an entry into a V2FeedPackageInfo
            </summary>
        </member>
        <member name="M:NuGet.Protocol.V2FeedParser.GetValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Retrieve an XML value safely
            </summary>
        </member>
        <member name="M:NuGet.Protocol.TimeoutUtility.StartWithTimeout``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.TimeSpan,System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a task with a timeout. If the timeout occurs, a <see cref="T:System.TimeoutException"/>
            with no message will be thrown.
            </summary>
        </member>
        <member name="M:NuGet.Protocol.TimeoutUtility.StartWithTimeout(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.TimeSpan,System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a task with a timeout. If the timeout occurs, a <see cref="T:System.TimeoutException"/>
            with no message will be thrown.
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode(System.Object[])">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
    </members>
</doc>
