<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Configuration</name>
    </assembly>
    <members>
        <member name="T:NuGet.Configuration.Resources">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.Argument_Cannot_Be_Null_Or_Empty">
            <summary>
               Looks up a localized string similar to Value cannot be null or empty string..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.Error_NoWritableConfig">
            <summary>
               Looks up a localized string similar to There are no writable config files..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.FileDoesNotExist">
            <summary>
               Looks up a localized string similar to File &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.InvalidNullSettingsOperation">
            <summary>
               Looks up a localized string similar to &quot;{0}&quot; cannot be called on a NullSettings. This may be caused on account of insufficient permissions to read or write to &quot;%AppData%\NuGet\NuGet.config&quot;..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.PackageSource_Invalid">
            <summary>
               Looks up a localized string similar to The package source does not belong to the collection of available sources..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.Settings_FileName_Cannot_Be_A_Path">
            <summary>
               Looks up a localized string similar to Parameter &apos;fileName&apos; to Settings must be just a fileName and not a path.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.ShowError_ConfigInvalidOperation">
            <summary>
               Looks up a localized string similar to NuGet.Config is malformed. Path: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.ShowError_ConfigInvalidXml">
            <summary>
               Looks up a localized string similar to NuGet.Config is not valid XML. Path: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.ShowError_ConfigRootInvalid">
            <summary>
               Looks up a localized string similar to NuGet.Config does not contain the expected root element: &apos;configuration&apos;. Path: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.ShowError_ConfigUnauthorizedAccess">
            <summary>
               Looks up a localized string similar to Failed to read NuGet.Config due to unauthorized access. Path: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.Unknown_Config_Exception">
            <summary>
               Looks up a localized string similar to Unexpected failure reading NuGet.Config. Path: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.UnsupportedDecryptPassword">
            <summary>
               Looks up a localized string similar to Password decryption is not supported on .NET Core for this platform. The following feed uses an encrypted password: &apos;{0}&apos;. You can use a clear text password as a workaround.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.UnsupportedEncryptPassword">
            <summary>
               Looks up a localized string similar to Password encryption is not supported on .NET Core for this platform. The following feed try to use an encrypted password: &apos;{0}&apos;. You can use a clear text password as a workaround.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.UserSettings_UnableToParseConfigFile">
            <summary>
               Looks up a localized string similar to Unable to parse config file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="F:NuGet.Configuration.CredentialRequestType.Proxy">
            <summary>
            Indicates that the request credentials are to be used to access a proxy.
            </summary>
        </member>
        <member name="F:NuGet.Configuration.CredentialRequestType.Unauthorized">
            <summary>
            Indicates that the remote server rejected the previous request as unauthorized. This 
            suggests that the server does not know who the caller is (i.e. the caller is not
            authenticated).
            </summary>
        </member>
        <member name="F:NuGet.Configuration.CredentialRequestType.Forbidden">
            <summary>
            Indicates that the remote server rejected the previous request as forbidden. This
            suggests that the server knows who the caller is (i.e. the caller is authorized) but
            is not allowed to access the request resource. A different set of credentials could
            solve this failure.
            </summary>
        </member>
        <member name="F:NuGet.Configuration.PackageSource.DefaultProtocolVersion">
            <summary>
            The feed version for NuGet prior to v3.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.TrySourceAsUri">
            <summary>
            Returns null if Source is an invalid URI
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.SourceUri">
            <summary>
            Throws if Source is an invalid URI
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.IsOfficial">
            <summary>
            This does not represent just the NuGet Official Feed alone
            It may also represent a Default Package Source set by Configuration Defaults
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.ProtocolVersion">
            <summary>
            Gets or sets the protocol version of the source. Defaults to 2.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.IsLocal">
            <summary>
            True if the source path is file based. Unc shares are not included.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.Origin">
            <summary>
            Gets the <see cref="T:NuGet.Configuration.ISettings"/> that this source originated from. May be null.
            </summary>
        </member>
        <member name="T:NuGet.Configuration.PackageSourceCredential">
            <summary>
            Represents credentials required to authenticate user within package source web requests.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSourceCredential.Username">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSourceCredential.PasswordText">
            <summary>
            Password text as stored in config file. May be encrypted.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSourceCredential.IsPasswordClearText">
            <summary>
            Indicates if password is stored in clear text.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSourceCredential.Password">
            <summary>
            Retrieves password in clear text. Decrypts on-demand.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSourceCredential.Source">
            <summary>
            Associated source ID
            </summary>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceCredential.IsValid">
            <summary>
            Verifies if object contains valid data, e.g. not empty user name and password.
            </summary>
            <returns>True if credentials object is valid</returns>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceCredential.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Instantiates the credential instance out of raw values read from a config file.
            </summary>
            <param name="source">Associated source ID (needed for reporting errors)</param>
            <param name="username">User name</param>
            <param name="passwordText">Password as stored in config file</param>
            <param name="isPasswordClearText">Hints if password provided in clear text</param>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceCredential.FromUserInput(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of credential object out values provided by user.
            </summary>
            <param name="source">Source ID needed for reporting errors if any</param>
            <param name="username">User name</param>
            <param name="password">Password text in clear</param>
            <param name="storePasswordInClearText">Hints if the password should be stored in clear text on disk.</param>
            <returns>New instance of <see cref="T:NuGet.Configuration.PackageSourceCredential"/></returns>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceProvider.LoadPackageSources">
            <summary>
            Returns PackageSources if specified in the config file. Else returns the default sources specified in the
            constructor.
            If no default values were specified, returns an empty sequence.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceProvider.OnPackageSourcesChanged">
            <summary>
            Fires event PackageSourcesChanged
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSourceProvider.ActivePackageSourceName">
            <summary>
            Gets the name of the ActivePackageSource from NuGet.Config
            </summary>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceProvider.SaveActivePackageSource(NuGet.Configuration.PackageSource)">
            <summary>
            Saves the <paramref name="source" /> as the active source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:NuGet.Configuration.IProxyCredentialCache">
            <summary>
            <see cref="T:System.Net.CredentialCache"/>-like interface with Update credential semantics rather than Add/Remove
            </summary>
        </member>
        <member name="P:NuGet.Configuration.IProxyCredentialCache.Version">
            <summary>
            Tracks the cache version. Changes every time proxy credential is updated.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.IProxyCredentialCache.UpdateCredential(System.Uri,System.Net.NetworkCredential)">
            <summary>
            Add or update proxy credential
            </summary>
            <param name="proxyAddress">Proxy network address</param>
            <param name="credentials">New credential object</param>
        </member>
        <member name="F:NuGet.Configuration.ProxyCache._originalSystemProxy">
            <summary>
            Capture the default System Proxy so that it can be re-used by the IProxyFinder
            because we can't rely on WebRequest.DefaultWebProxy since someone can modify the DefaultWebProxy
            property and we can't tell if it was modified and if we are still using System Proxy Settings or not.
            One limitation of this method is that it does not look at the config file to get the defined proxy
            settings.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ProxyCache.IsSystemProxySet(System.Uri)">
            <summary>
            Return true or false if connecting through a proxy server
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:NuGet.Configuration.WebProxy">
            <summary>
            Internal implementation of <see cref="T:System.Net.IWebProxy"/> mirroring default desktop one.
            Introduced for XPlat coreFx support.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ConfigurationDefaults.#ctor(System.String,System.String)">
            <summary>
            An internal constructor MAINLY INTENDED FOR TESTING THE CLASS. But, the product code is only expected to
            use the static Instance property
            Only catches FileNotFoundException. Will throw all exceptions including other IOExceptions and
            XmlExceptions for invalid xml and so on
            </summary>
            <param name="directory">The directory that has the NuGetDefaults.Config</param>
            <param name="configFile">Name of the NuGetDefaults.Config</param>
        </member>
        <member name="T:NuGet.Configuration.ISettings">
            <summary>
            Interface to expose NuGet Settings
            </summary>
        </member>
        <member name="P:NuGet.Configuration.ISettings.Root">
            <summary>
            Folder under which the config file is present
            </summary>
        </member>
        <member name="P:NuGet.Configuration.ISettings.FileName">
            <summary>
            The file name of the config file. Joining <see cref="P:NuGet.Configuration.ISettings.Root"/> and
            <see cref="P:NuGet.Configuration.ISettings.FileName"/> results in the full path to the config file.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.ISettings.Priority">
            <summary>
            Enumerates the sequence of <see cref="T:NuGet.Configuration.ISettings"/> instances used to fetch settings
            values (e.g. with <see cref="M:NuGet.Configuration.ISettings.GetValue(System.String,System.String,System.Boolean)"/>). This enumeration includes this instance
            itself.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ISettings.GetValue(System.String,System.String,System.Boolean)">
            <summary>
            Gets a value for the given key from the given section
            If isPath is true, then the value represents a path. If the path value is already rooted, it is simply
            returned
            Otherwise, path relative to ISettings.Root is returned
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ISettings.GetSettingValues(System.String,System.Boolean)">
            <summary>
            Gets all the values under section
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ISettings.GetNestedValues(System.String,System.String)">
            <summary>
            Gets all the values under section
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ISettings.SetValues(System.String,System.Collections.Generic.IReadOnlyList{NuGet.Configuration.SettingValue})">
            <summary>
            Sets the values under the specified <paramref name="section" />.
            </summary>
            <param name="section">The name of the section.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="M:NuGet.Configuration.ISettings.UpdateSections(System.String,System.Collections.Generic.IReadOnlyList{NuGet.Configuration.SettingValue})">
            <summary>
            Updates the <paramref name="values" /> across multiple <see cref="T:NuGet.Configuration.ISettings" /> instances in the hierarchy.
            Values are updated in the <see cref="T:NuGet.Configuration.ISettings" /> with the nearest priority.
            </summary>
            <param name="section">The name of the section.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="E:NuGet.Configuration.ISettings.SettingsChanged">
            <summary>
            Event raised when the setting have been changed.
            </summary>
        </member>
        <member name="T:NuGet.Configuration.Settings">
            <summary>
            Concrete implementation of ISettings to support NuGet Settings
            </summary>
        </member>
        <member name="F:NuGet.Configuration.Settings.DefaultSettingsFileName">
            <summary>
            Default file name for a settings file is 'NuGet.config'
            Also, the machine level setting file at '%APPDATA%\NuGet' always uses this name
            </summary>
        </member>
        <member name="F:NuGet.Configuration.Settings.OrderedSettingsFileNames">
            <summary>
            NuGet config names with casing ordered by precedence.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Settings.Root">
            <summary>
            Folder under which the config file is present
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Settings.ConfigFilePath">
            <summary>
            Full path to the ConfigFile corresponding to this Settings object
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Settings.LoadDefaultSettings(System.String,System.String,NuGet.Configuration.IMachineWideSettings)">
            <summary>
            Loads user settings from the NuGet configuration files. The method walks the directory
            tree in <paramref name="root" /> up to its root, and reads each NuGet.config file
            it finds in the directories. It then reads the user specific settings,
            which is file <paramref name="configFileName" />
            in <paramref name="root" /> if <paramref name="configFileName" /> is not null,
            If <paramref name="configFileName" /> is null, the user specific settings file is
            %AppData%\NuGet\NuGet.config.
            After that, the machine wide settings files are added.
            </summary>
            <remarks>
            For example, if <paramref name="root" /> is c:\dir1\dir2, <paramref name="configFileName" />
            is "userConfig.file", the files loaded are (in the order that they are loaded):
            c:\dir1\dir2\nuget.config
            c:\dir1\nuget.config
            c:\nuget.config
            c:\dir1\dir2\userConfig.file
            machine wide settings (e.g. c:\programdata\NuGet\Config\*.config)
            </remarks>
            <param name="root">
            The file system to walk to find configuration files.
            Can be null.
            </param>
            <param name="configFileName">The user specified configuration file.</param>
            <param name="machineWideSettings">
            The machine wide settings. If it's not null, the
            settings files in the machine wide settings are added after the user sepcific
            config file.
            </param>
            <returns>The settings object loaded.</returns>
        </member>
        <member name="M:NuGet.Configuration.Settings.LoadSpecificSettings(System.String,System.String)">
            <summary>
            Loads Specific NuGet.Config file. The method only loads specific config file 
            which is file <paramref name="configFileName"/>from <paramref name="root"/>.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Settings.LoadDefaultSettings(System.String,System.String,NuGet.Configuration.IMachineWideSettings,System.Boolean,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Settings.LoadMachineWideSettings(System.String,System.String[])">
            <summary>
            Loads the machine wide settings.
            </summary>
            <remarks>
            For example, if <paramref name="paths" /> is {"IDE", "Version", "SKU" }, then
            the files loaded are (in the order that they are loaded):
            %programdata%\NuGet\Config\IDE\Version\SKU\*.config
            %programdata%\NuGet\Config\IDE\Version\*.config
            %programdata%\NuGet\Config\IDE\*.config
            %programdata%\NuGet\Config\*.config
            </remarks>
            <param name="root">The file system in which the settings files are read.</param>
            <param name="paths">The additional paths under which to look for settings files.</param>
            <returns>The list of settings read.</returns>
        </member>
        <member name="M:NuGet.Configuration.Settings.GetSettingsFileNames(System.String)">
            <remarks>
            Order is most significant (e.g. applied last) to least significant (applied first)
            ex:
            c:\someLocation\nuget.config
            c:\nuget.config
            </remarks>
        </member>
        <member name="M:NuGet.Configuration.Settings.GetSettingsFileNameFromDir(System.String)">
            <summary>
            Checks for each possible casing of nuget.config in the directory. The first match is
            returned. If there are no nuget.config files null is returned.
            </summary>
            <remarks>For windows <see cref="F:NuGet.Configuration.Settings.OrderedSettingsFileNames"/> contains a single casing since
            the file system is case insensitive.</remarks>
        </member>
        <member name="M:NuGet.Configuration.Settings.ExecuteSynchronized(System.Action)">
            <summary>
            Wrap all IO operations on setting files with this function to avoid file-in-use errors
            </summary>
        </member>
        <member name="T:NuGet.Configuration.SettingValue">
            <summary>
            Represents a single setting value in a settings file
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.Key">
            <summary>
            Represents the key of the setting
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.Value">
            <summary>
            Represents the value of the setting
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.OriginalValue">
            <summary>
            original value of the source as in NuGet.Config
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.IsMachineWide">
            <summary>
            IsMachineWide tells if the setting is machine-wide or not
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.Priority">
            <summary>
            The priority of this setting in the nuget.config hierarchy. Bigger number means higher priority
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.Origin">
            <summary>
            Gets the <see cref="T:NuGet.Configuration.ISettings"/> that provided this value.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.AdditionalData">
            <summary>
            Gets additional values with the specified setting.
            </summary>
            <remarks>
            When reading from an XML based settings file, this includes all attributes on the element
            other than the <c>Key</c> and <c>Value</c>.
            </remarks>
        </member>
        <member name="T:NuGet.Configuration.IExtensionLocator">
            <summary>
            Provides a common facility for locating extensions
            </summary>
        </member>
        <member name="M:NuGet.Configuration.IExtensionLocator.FindExtensions">
            <summary>
            Find paths to all extensions
            </summary>
        </member>
        <member name="M:NuGet.Configuration.IExtensionLocator.FindCredentialProviders">
            <summary>
            Find paths to all credential providers
            </summary>
        </member>
        <member name="M:NuGet.Configuration.SettingsUtility.GetConfigValue(NuGet.Configuration.ISettings,System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a config value for the specified key
            </summary>
            <param name="settings">The settings instance to retrieve </param>
            <param name="key">The key to look up</param>
            <param name="decrypt">Determines if the retrieved value needs to be decrypted.</param>
            <param name="isPath">Determines if the retrieved value is returned as a path.</param>
            <returns>Null if the key was not found, value from config otherwise.</returns>
        </member>
        <member name="M:NuGet.Configuration.SettingsUtility.SetConfigValue(NuGet.Configuration.ISettings,System.String,System.String,System.Boolean)">
            <summary>
            Sets a config value in the setting.
            </summary>
            <param name="settings">The settings instance to store the key-value in.</param>
            <param name="key">The key to store.</param>
            <param name="value">The value to store.</param>
            <param name="encrypt">Determines if the value needs to be encrypted prior to storing.</param>
        </member>
        <member name="M:NuGet.Configuration.SettingsUtility.DeleteConfigValue(NuGet.Configuration.ISettings,System.String)">
            <summary>
            Deletes a config value from settings
            </summary>
            <param name="settings">The settings instance to delete the key from.</param>
            <param name="key">The key to delete.</param>
            <returns>True if the value was deleted, false otherwise.</returns>
        </member>
        <member name="M:NuGet.Configuration.SettingsUtility.GetDefaultPushSource(NuGet.Configuration.ISettings)">
            <summary>
            The DefaultPushSource can be:
            - An absolute URL
            - An absolute file path
            - A relative file path
            - The name of a registered source from a config file
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode(System.Object[])">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
    </members>
</doc>
